name: Python Labs Pre-Publish
description: Perform pre-release operations for Python Libraries in MongoDB Labs
inputs:
  tag_template:
    description: The template for the git tag
    default: "${VERSION}"
  tag_message_template:
    description: The template for the git tag message
    default: "Release ${VERSION}"
  working_directory:
    description: The working directory for the action
    default: "."
  dry_run:
    description: Whether this is a dry run
    required: true

outputs:
  version:
    description: The output version to use
    value: ${{ steps.version.outputs.version }}

runs:
  using: composite
  steps:
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install hatch
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        pipx install hatch
        pip install build
    - name: Handle inputs
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DRY_RUN: "${{ inputs.dry_run }}"
      run: |
        set -eux
        # Handle DRY_RUN
        if [ "$DRY_RUN" != "true" ]; then
            export PUSH_CHANGES=true
        else
            export PUSH_CHANGES=false
        fi
        echo "PUSH_CHANGES=$PUSH_CHANGES" >> $GITHUB_ENV
        # Handle version
        # Extract the version from the sdist name, which must be of the form
        # {name}-{version}.tar.gz according to PEP 625.
        python -m build --sdist .
        VERSION=$(ls dist/*.tar.gz | rev | cut -d'-' -f 1 | rev | sed 's/.tar.gz//g')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        rm -rf dist
    - name: Tag version
      uses: mongodb-labs/drivers-github-tools/tag-version@v2
      with:
        version: ${{ env.VERSION }}
        tag_template: ${{ inputs.tag_template }}
        tag_message_template: ${{ inputs.tag_message_template }}
        push_tag: ${{ env.PUSH_CHANGES }}
    - name: Handle version output
      shell: bash
      id: version
      run: |
        if [ "${{ inputs.dry_run}}" == 'true' ]; then
          echo "version=${{ github.ref }}" >> $GITHUB_OUTPUT
        else
          export VERSION=${{ env.VERSION }}
          export TAG=$(echo "${{ inputs.tag_template }}" | envsubst)
          echo "version=$TAG" >> $GITHUB_OUTPUT
        fi