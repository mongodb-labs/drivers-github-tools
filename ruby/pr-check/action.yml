name: PR Check
description: Check that a PR is eligible for release

outputs:
  message:
    description: The body of the pull request that is being released.
    value: ${{ steps.check_pr.outputs.message }}
  ref:
    description: The ref of the pull request that is being released.
    value: ${{ steps.check_pr.outputs.ref }}

runs:
  using: composite
  steps:
    - name: "Check PR Eligibility"
      id: check_pr
      uses: actions/github-script@v7
      with:
        script: |
          let pr;

          // if the event is a pull request, then we don't need to check
          // the actors permissions, because they'll have had permissions
          // to merge the PR in the first place.
          if (context.payload.pull_request) {
            pr = context.payload.pull_request;

          // if the event is a comment, then we need to check that the
          // comment is in the correct format, and that the user has
          // acceptible access to the repository.
          } else if (context.issue) {
            const comment = context.payload.comment;

            // first, is the message in the correct format?
            const body = comment.body.trim();
            if (body != '/release') {
              throw new Error('Command not detected in comment body.');
            }

            // if the event is an issue comment, we need to check the
            // comment author has necessary access to the repository,
            // before we let them proceed.
            const username = comment.user.login;
            const { data: results } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username,
            });

            if (results.role_name !== 'admin' && results.role_name !== 'maintain') {
              throw new Error(`User ${username} must have 'admin' or 'maintain' role to initiate the release process.`);
            }

            const result = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            pr = result.data
          }

          if (!pr) {
            throw new Error('No pull request found for the triggered event.');
          }
          if (!pr.merged) {
            throw new Error('Pull request is not merged.');
          }
          if (!pr.labels.some(label => label.name == 'release-candidate')) {
            throw new Error('Pull request is not a release candidate.');
          }

          console.log('body: >>', pr.body, '<<');
          console.log('ref: >>', pr.merge_commit_sha, '<<');

          core.setOutput('message', pr.body);
          core.setOutput('ref', pr.merge_commit_sha);
