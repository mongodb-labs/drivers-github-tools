name: Publish Ruby
description: Publish gems, signatures, and assets for MongoDB Ruby projects
inputs:
  app_id:
    description: The APP_ID defined for this project
    required: true
  app_private_key:
    description: The APP_PRIVATE_KEY defined for this project
    required: true
  aws_role_arn:
    description: The AWS_ROLE_ARN defined for this project
    required: true
  aws_region_name:
    description: The AWS_REGION_NAME defined for this project
    required: true
  aws_secret_id:
    description: The AWS_SECRET_ID defined for this project
    required: true
  bundler_cache_version:
    description: The cache-version to use for the bundler cache
    required: false
    default: '0'
  dry_run:
    description: Whether this is a dry run or not ("false" for releases)
    required: true
  gem_name:
    description: The name (sans extension) of the gemspec file (e.g. "mongo")
    required: true
  product_name:
    description: The name of the product being published (e.g. "Ruby Driver")
    required: true
  product_id:
    description: The identifier of the product being published (e.g. "mongo-ruby-driver")
    required: true
  release_notes_path:
    description: The path to a file containing the release notes to post as the description of the new release
    required: true
  rubygems_version:
    description: The version of Rubygems to use (see setup-ruby/action.yml)
    required: false
    default: latest
  ruby_version:
    description: The version of Ruby to use (see setup-ruby/action.yml)
    default: '3.2'
    required: false
  silk_asset_group:
    description: The Silk asset group for the project
    required: true

runs:
  using: composite
  steps:
    - name: Check out the repository
      uses: mongodb-labs/drivers-github-tools/secure-checkout@v2
      with:
        app_id: ${{ inputs.app_id }}
        private_key: ${{ inputs.app_private_key }}

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby_version }}
        rubygems: ${{ inputs.rubygems_version }}
        bundler-cache: true
        cache-version: ${{ inputs.bundler_cache_version }}

    - name: Get the release version
      id: release_version
      shell: bash
      run: echo "version=$(bundle exec rake version)" >> "$GITHUB_OUTPUT"

    - name: Setup GitHub tooling for DBX Drivers
      uses: mongodb-labs/drivers-github-tools/setup@v2
      with:
        aws_role_arn: ${{ inputs.aws_role_arn }}
        aws_region_name: ${{ inputs.aws_region_name }}
        aws_secret_id: ${{ inputs.aws_secret_id }}

    - name: Fetch the gem artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: '*.gem'
        merge-multiple: true

    - name: Sign the gem
      uses: mongodb-labs/drivers-github-tools/gpg-sign@v2
      with:
        filenames: '*.gem'

    - name: Generate SSDLC Reports
      uses: mongodb-labs/drivers-github-tools/full-report@v2
      with:
        product_name: ${{ inputs.product_name }}
        release_version: ${{ steps.release_version.outputs.version }}
        dist_filenames: '*.gem'
        silk_asset_group: ${{ inputs.silk_asset_group }}

    - name: Look for existing tag
      id: tag_exists
      shell: bash
      run: |
        if git rev-parse "v${{ steps.release_version.outputs.version }}" >/dev/null 2>&1; then
          echo "Tag v${{ steps.release_version.outputs.version }} already exists."
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "Tag v${{ steps.release_version.outputs.version }} does not exist."
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Create the tag
      uses: mongodb-labs/drivers-github-tools/tag-version@v2
      if: steps.tag_exists.outputs.exists == 'false'
      with:
        version: ${{ steps.release_version.outputs.version }}
        tag_template: "v${VERSION}"
        tag_message_template: "Release tag for v${VERSION}"

    - name: Look for existing release
      id: release_exists
      shell: bash
      run: |
        if gh release view "v${{ steps.release_version.outputs.version }}" >/dev/null 2>&1; then
          echo "Release v${{ steps.release_version.outputs.version }} already exists."
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "Release v${{ steps.release_version.outputs.version }} does not exist."
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Create a new release
      if: steps.release_exists.outputs.exists == 'false'
      shell: bash
      run: gh release create v${{ steps.release_version.outputs.version }} --title ${{ steps.release_version.outputs.version }} --notes-file ${{ inputs.release_notes_path }} --draft

    - name: Else update the existing release
      if: steps.release_exists.outputs.exists == 'true'
      shell: bash
      run: gh release edit v${{ steps.release_version.outputs.version }} --notes-file ${{ inputs.release_notes_path }}

    - name: Upload release artifacts
      shell: bash
      run: gh release upload --clobber v${{ steps.release_version.outputs.version }} *.gem ${{ env.RELEASE_ASSETS }}/*.sig

    - name: Upload S3 assets
      uses: mongodb-labs/drivers-github-tools/upload-s3-assets@v2
      with:
        version: ${{ steps.release_version.outputs.version }}
        product_name: ${{ inputs.product_id }}
        dry_run: ${{ inputs.dry_run }}

    - name: Look for existing gem
      id: gem_exists
      shell: bash
      run: |
        if gem search --remote ${{ inputs.gem_name }} --version ${{ steps.release_version.outputs.version }} | grep -q "${{ steps.release_version.outputs.version }}"; then
          echo "Gem ${{ inputs.gem_name }} version ${{ steps.release_version.outputs.version }} already exists."
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "Gem ${{ inputs.gem_name }} version ${{ steps.release_version.outputs.version }} does not exist."
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Publish the gem
      uses: rubygems/release-gem@v1
      if: inputs.dry_run == 'false' && steps.gem_exists.outputs.exists == 'false'
      with:
        await-release: false

    - name: Publish the release
      if: inputs.dry_run == 'false'
      shell: bash
      run: gh release edit v${{ steps.release_version.outputs.version }} --draft=false

